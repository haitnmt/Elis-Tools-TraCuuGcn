@inject IJSRuntime JsRuntime
@inject ZxingService ZxingService
@inject AppSettingsService AppSettingsService
@inject BarcodeDetectionService BarcodeDetectionService
@using System.Text.Json
@implements IAsyncDisposable
@attribute [StreamRendering]
<MudStack>
    <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center">
        <MudTextField @bind-Value="@_result" Label="Nhập thông tin tìm kiếm"
                      HelperText="Số phát hành (Serial), Mã Giấy chứng nhận, Mã vạch, Mã Qr"/>
        <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Search"
                       OnClick="OnClickSearch"/>
        <MudFileUpload T="IBrowserFile"
                       FilesChanged="HandleImageUpload!"
                       Accept=".png, .jpg, .jpeg, .bmp, .gif">
            <ActivatorContent>
                <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Image">
                </MudIconButton>
            </ActivatorContent>
        </MudFileUpload>
        <MudIconButton Color="Color.Primary" Disabled="@(!_hasCamera || _isCameraActive)" Size="Size.Small"
                       Icon="@Icons.Material.Filled.QrCodeScanner" @onclick="ToggleCamera"/>
    </MudStack>
    @if (_isCameraActive)
    {
        <MudStack AlignItems="AlignItems.Center">
            <video playsinline @ref="_videoElement" id="camera-preview"
                   style="width: 300px; height: 300px; object-fit: cover"
                   autoplay muted>
            </video>
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Stop" @onclick="ToggleCamera">
                Dừng quét
            </MudButton>
        </MudStack>
    }
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <MudAlert Severity="Severity.Error" Dense="true">
            <MudText Typo="Typo.body2">@_errorMessage</MudText>
        </MudAlert>
    }
</MudStack>


@code {
    [Parameter] public bool AutoStopCamera { get; set; }
    [Parameter] public string? Result { get; set; }
    [Parameter] public EventCallback<string?> ResultChanged { get; set; }
    [Parameter] public EventCallback<bool> IsCameraActiveChanged { get; set; }
    
    private ElementReference _videoElement;
    private bool _isCameraActive;
    private bool _hasCamera;
    private IBrowserFile? _uploadedImage;
    private string? _result = string.Empty;
    private string _errorMessage = string.Empty;
    private bool _browserSupportsBarcodeDetection;
    private string[] _barcodeTypes = ["qr_code", "barcode"];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BarcodeDetectionService.InitializeAsync();
            _browserSupportsBarcodeDetection = await BarcodeDetectionService.IsBarcodeDetectionSupportedAsync();
            if (!_browserSupportsBarcodeDetection)
                await ZxingService.InitializeAsync();
            _barcodeTypes = await BarcodeDetectionService.GetSupportedFormatsAsync();
            _hasCamera = await BarcodeDetectionService.IsCameraAvailableAsync();
            _barcodeTypes = await BarcodeDetectionService.GetSupportedFormatsAsync();
            StateHasChanged();
        }
    }
    
    private async Task ToggleCamera()
    {
        _isCameraActive = !_isCameraActive;
        await IsCameraActiveChanged.InvokeAsync(_isCameraActive);
        if (_isCameraActive)
        {
            _errorMessage = string.Empty;
            _result = string.Empty;
            StateHasChanged();
            // Đợi render xong video element
            await Task.Yield();
            var dotNetRef = DotNetObjectReference.Create(this);
            if (!_browserSupportsBarcodeDetection)
                await ZxingService.StartCameraScan(_videoElement, 
                    dotNetRef, nameof(HandleScanResultByZing));
            else
            {
                
                await BarcodeDetectionService.StartLiveDetectionAsync(
                    dotNetRef, nameof(HandleScanResult),
                    _videoElement, _barcodeTypes);
            }
        }
        else
        {
            if (!_browserSupportsBarcodeDetection)
                await ZxingService.StopCameraScan();
            await BarcodeDetectionService.StopLiveDetectionAsync(_videoElement);
        }
    }
    
    [JSInvokable]
    public void HandleScanResultByZing(string text)
    {
        if (AutoStopCamera)
        {
            _ = ZxingService.StopCameraScan();
            _isCameraActive = false;
        }
        _result = text;
        _errorMessage = string.Empty;
        Result = text;
        ResultChanged.InvokeAsync(Result);
        StateHasChanged();
    }   
    [JSInvokable]
    public void HandleScanResult(JsonElement result)
    {
        var barcodeDetectionResult = BarcodeDetectionService.ParseResult(result);
        if (!barcodeDetectionResult.Success || barcodeDetectionResult.Barcodes.Length == 0)
            return;
        if (AutoStopCamera)
        {
            _ = BarcodeDetectionService.StopLiveDetectionAsync(_videoElement);
            _isCameraActive = false;
        }
        _result = barcodeDetectionResult.Barcodes.FirstOrDefault()?.RawValue;
        _errorMessage = barcodeDetectionResult.Error ?? string.Empty;
        Result = _result;
        ResultChanged.InvokeAsync(Result);
        StateHasChanged();
    }   

    private async Task HandleImageUpload(IBrowserFile file)
    {
        if (_isCameraActive)
        {
            await ToggleCamera();
        }
        _uploadedImage = file;
        await ScanFromImage();
    }

    private async Task ScanFromImage()
    {
        if (_uploadedImage == null)
        {
            _errorMessage = "Vui lòng chọn ảnh cần quét!";
            return;
        }
        _errorMessage = string.Empty;
       if (!_browserSupportsBarcodeDetection)
            await ScanFromImageByZxing();
       else
       {
           var result = await BarcodeDetectionService.DetectFromImageAsync(_uploadedImage, _barcodeTypes);
           if (result is { Success: true, Barcodes.Length: > 0 })
           {
               _result = result.Barcodes.FirstOrDefault()?.RawValue;
               _errorMessage = string.Empty;
               Result = _result;
               await ResultChanged.InvokeAsync(Result);
               StateHasChanged();
           }
           else
           {
               await ScanFromImageByZxing();
           }
       }
    }

    private async Task ScanFromImageByZxing()
    {
        try
        {
            _result = await ZxingService.ScanFromImage(_uploadedImage);
            if (string.IsNullOrWhiteSpace(_result))
                _errorMessage = "Không tìm thấy mã QR hoặc mã vạch trong ảnh. Vui lòng thử lại với ảnh khác!";
        }
        catch (Exception exZxing) when (exZxing.Message.Contains("No barcode found"))
        {
            _errorMessage = "Không tìm thấy mã QR hoặc mã vạch trong ảnh. Vui lòng thử lại với ảnh khác!";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Lỗi: {ex.Message}";
        }
        finally
        {
            Result = _result ?? string.Empty;
            await ResultChanged.InvokeAsync(Result);
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_isCameraActive)
        {
            await ZxingService.StopCameraScan();
        }
    }

    private void OnClickSearch()
    {
        if (_isCameraActive)
        {
            _ = ToggleCamera();
        }
        _errorMessage = string.Empty;
        Result = _result ?? string.Empty;
        ResultChanged.InvokeAsync(_result);
    }

}