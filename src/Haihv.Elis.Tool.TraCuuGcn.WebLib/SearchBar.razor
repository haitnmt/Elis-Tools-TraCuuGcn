@inject IJSRuntime JsRuntime
@inject BarcodeScannerService BarcodeScannerService
@implements IAsyncDisposable
@attribute [StreamRendering]

@if (!_isLoaded)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    <MudAlert Severity="Severity.Info" Dense="true">
        <MudText Typo="Typo.body2">@_loadingMessage</MudText>
    </MudAlert>
}
else
{
    <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center">
        <MudTextField @bind-Value="@_result" Label="Nhập thông tin tìm kiếm"
                      HelperText="Số phát hành (Serial), Mã Giấy chứng nhận, Mã vạch, Mã Qr"/>
        <MudIconButton Color="Color.Primary"
                       Size="Size.Small"
                       Icon="@Icons.Material.Filled.Search"
                       OnClick="OnClickSearch"/>
        <MudFileUpload T="IBrowserFile" FilesChanged="HandleImageUpload!">
            <ActivatorContent>
                <MudIconButton Color="Color.Primary"
                               Size="Size.Small"
                               Icon="@Icons.Material.Filled.Image">
                </MudIconButton>
            </ActivatorContent>
        </MudFileUpload>
        <MudIconButton Color="Color.Primary" Disabled="!_hasCamera"
                       Size="Size.Small"
                       Icon="@Icons.Material.Filled.QrCodeScanner"
                       @onclick="ToggleScanQr"/>

            @*<MudIconButton Color="Color.Primary" Disabled="true"
                           Size="Size.Small"
                           Icon="@Material.Filled.Barcode"
                           @onclick="ToggleScanBarCode"/>*@
        
    </MudStack>
    @if(string.IsNullOrWhiteSpace(_result) && !string.IsNullOrWhiteSpace(_errorMessage))
    {
        <MudAlert Severity="Severity.Error" Dense="true">
            <MudText Typo="Typo.body2">@_errorMessage</MudText>
        </MudAlert>
    }
    <div class="scanner-container" style="@(_isCameraActive ? "display: flex;" : "display: none;")">
        <video class="video @(_isCameraActive ? "video-active" : "")" 
               id="camera-preview" 
               @ref="_videoElement" >
        </video>
        <div class="scanner-frame" @ref="_canvasElement"></div>
        <MudButton class="camera-stop-button"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Stop"
                   @onclick="@(_isQrScanner ? ToggleScanQr : ToggleScanBarCode)">
            Dừng quét
        </MudButton>
    </div>
}
<style>
    .scanner-container {
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        z-index: 1000;
    }

    .video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .video-active {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1001;
    }
    .scanner-frame {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 230px;
        height: 230px;
        border: 2px solid red;
        transform: translate(-50%, -50%);
        box-sizing: border-box;
        z-index: 1001;
    }
    .camera-stop-button {
        position: absolute;
        bottom: 58px;
        right: 10px;
        z-index: 1002;
    }
</style>

@code {
    [Parameter] public bool AutoStopCamera { get; set; }
    [Parameter] public string Result { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ResultChanged { get; set; }
    private ElementReference _videoElement;
    private ElementReference _canvasElement;
    private bool _hasCamera;
    private bool _isCameraActive;
    private IBrowserFile? _uploadedImage;
    private string _result = string.Empty;
    private string _errorMessage = string.Empty;
    private bool _isLoaded;
    private string _loadingMessage = "Đang tải thư viện quét mã QR...";
    private bool _isQrScanner;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BarcodeScannerService.InitializeAsync();
            _hasCamera = BarcodeScannerService.HasCamera();
            _isLoaded = true;
            StateHasChanged();
        }
    }
    
    private async Task ToggleScanBarCode()
    {
        if (!_isCameraActive)
        {
            _isQrScanner = false;
            await BarcodeScannerService.StartCameraScanCode128(_videoElement, DotNetObjectReference.Create(this));
        }
        else
        {
            await BarcodeScannerService.StopCameraScanCode128();
        }

        _isCameraActive = !_isCameraActive;
    }
    
    [JSInvokable]
    public void HandleScanCode128Result(string text)
    {
        _result = text;
        _errorMessage = string.Empty;
        Result = _result;
        ResultChanged.InvokeAsync(_result);
        if (AutoStopCamera)
        {
            _ = BarcodeScannerService.StopCameraScanCode128();
            _isCameraActive = false;
        }
        StateHasChanged();
    }
    
    private async Task ToggleScanQr()
    {
        if (!_isCameraActive)
        {
            _isQrScanner = true;
            await BarcodeScannerService.StartCameraScanQr(_videoElement, DotNetObjectReference.Create(this));
        }
        else
        {
            await BarcodeScannerService.StopCameraScanQr();
        }

        _isCameraActive = !_isCameraActive;
    }
    
    [JSInvokable]
    public void HandleScanQrResult(string text)
    {
        _result = text;
        _errorMessage = string.Empty;
        Result = _result;
        ResultChanged.InvokeAsync(_result);
        if (AutoStopCamera)
        {
            _ = BarcodeScannerService.StopCameraScanQr();
            _isCameraActive = false;
        }
        StateHasChanged();
    }

    private async Task HandleImageUpload(IBrowserFile file)
    {
        _uploadedImage = file;
        _errorMessage = string.Empty;
        await ScanFromImage();
    }

    private async Task ScanFromImage()
    {   
        if (_uploadedImage == null) return;
        _errorMessage = string.Empty;
        try
        {
            _result = await BarcodeScannerService.ScanFromImage(_uploadedImage);
            Result = _result;
            await ResultChanged.InvokeAsync(_result);
        }
        catch (JSException jsEx) when (jsEx.Message.Contains("Không tìm thấy QR Code trong ảnh."))
        {
            _errorMessage = "Không tìm thấy mã trong ảnh. Vui lòng thử lại với ảnh khác.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Lỗi ảnh: {ex.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_isCameraActive)
        {
            if (_isQrScanner)
            {
                await BarcodeScannerService.StopCameraScanQr();
            }
            else
            {
                await BarcodeScannerService.StopCameraScanCode128();
            }
        }
    }

    private void OnClickSearch()
    {
        Result = _result;
        ResultChanged.InvokeAsync(_result);
    }

}