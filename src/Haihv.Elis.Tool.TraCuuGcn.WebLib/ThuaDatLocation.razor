@using System.Text.Json

<MudCard>
    <MudCardContent>
        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h6">Vị trí thửa đất</MudText>
            <MudSpacer/>
            <MudTooltip Text="Mở trên Google Map">
                <MudIconButton Icon="@Icons.Material.Filled.Map" OnClick="LeafletMapService.ShareToGoogleMaps"/>
            </MudTooltip>
        </MudStack>
        <AuthorizeView>
            <Authorized>
                @if (!_isMapInitialized || _isLoading)
                {
                    <MudProgressLinear Color="Color.Success" Indeterminate="true"/>

                }
                else
                {
                    @if (_geoJsonData is null || !string.IsNullOrWhiteSpace(_error))
                    {
                        <MudAlert Severity="Severity.Error">
                            @(_error ?? "Không tìm thấy vị trí thửa đất")
                        </MudAlert>
                    }
                }
                <MudPaper Outlined="true" Elevation="1">
                    <div id="@MapContainerId" 
                         style="width: 100%; aspect-ratio: 1;"></div>
                </MudPaper>
            </Authorized>
            <NotAuthorized>
                <MudAlert Severity="Severity.Error">
                    Bạn không có quyền truy cập
                </MudAlert>
            </NotAuthorized>
        </AuthorizeView>
    </MudCardContent>
</MudCard>

@inject IHttpClientFactory HttpClientFactory
@inject LeafletMapService LeafletMapService

@code 
{
    [Parameter] public long? MaGcnElis { get; set; }
    private const string MapContainerId = "map";
    private HttpClient? _httpClient;
    private string? _geoJsonData;
    private string? _error = string.Empty;
    private long? _maGcnElis;
    private bool _isLoading;
    private const string GetToaDoThuaDatUrl = "/geo/toaDoThua";
    private bool _isMapInitialized;

    protected override async Task OnInitializedAsync()
    {
        await LeafletMapService.InitializeAsync(MapContainerId);
        _isMapInitialized = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (MaGcnElis > 0 && MaGcnElis == _maGcnElis && _geoJsonData is not null) return;
        _maGcnElis = MaGcnElis;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _error = null;
        _isLoading = true;
        StateHasChanged();
        _httpClient ??= HttpClientFactory.CreateClient("Endpoint");
        _geoJsonData = null;
        var url = $"{GetToaDoThuaDatUrl}?maGcnElis={_maGcnElis}";
        try
        {
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(result))
                {
                    _error = "Không tìm thấy vị trí thửa đất";
                    return;
                }
                _geoJsonData = JsonSerializer.Serialize(JsonSerializer.Deserialize<object>(result));
                await LeafletMapService.UpdateMapAsync(_geoJsonData);
            }
            else
            {
                _error = "Không tìm thấy vị trí thửa đất";
            }
            _isLoading = false;
        }
        catch (Exception e)
        {
            _error = "Lỗi khi tải vị trí thửa đất";
            Console.WriteLine(e);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}