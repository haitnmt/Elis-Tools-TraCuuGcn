@using System.Text.Json
@if (HasGiayChungNhan)
{
    <MudCard>
        <MudCardContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Vị trí thửa đất</MudText>
                <MudSpacer/>
                <MudTooltip Text="Mở trên Google Map">
                    <MudIconButton Icon="@Icons.Material.Filled.Map" OnClick="LeafletMapService.ShareToGoogleMaps"/>
                </MudTooltip>
            </MudStack>
            <AuthorizeView>
                <Authorized>
                    @if (_isLoading)
                    {
                        <MudProgressLinear Color="Color.Success" Indeterminate="true"/>

                    }
                    else
                    {
                        @if (_geoJsonData is null || !string.IsNullOrWhiteSpace(_error))
                        {
                            <MudAlert Severity="Severity.Error">
                                @(_error ?? "Không tìm thấy vị trí thửa đất")
                            </MudAlert>
                        }
                    }
                    <MudPaper Outlined="true" Elevation="1">
                        <div id="@MapContainerId" 
                             style="width: 100%; aspect-ratio: 1;"></div>
                    </MudPaper>
                </Authorized>
                <NotAuthorized>
                    <MudAlert Severity="Severity.Error">
                        Bạn không có quyền truy cập
                    </MudAlert>
                </NotAuthorized>
            </AuthorizeView>
        </MudCardContent>
    </MudCard>
}

@inject IAuthService AuthService
@inject LeafletMapService LeafletMapService

@code 
{
    [Parameter] public string? Serial { get; set; }
    [Parameter] public bool HasGiayChungNhan { get; set; }
    private const string MapContainerId = "map";
    private HttpClient? _httpClient;
    private string? _geoJsonData;
    private string? _error = string.Empty;
    private string? _serial;
    private bool _isLoading;
    private const string GetToaDoThuaDatUrl = "/geo/toaDoThua";

    protected override async Task OnParametersSetAsync()
    {
        if (!HasGiayChungNhan || (Serial == _serial && _geoJsonData is not null)) return;
        _serial = Serial;
        if (string.IsNullOrWhiteSpace(_serial))
        {
            HasGiayChungNhan = false;
            StateHasChanged();
        }
        else
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        _error = null;
        _isLoading = true;
        StateHasChanged();
        _httpClient ??= await AuthService.CreateEndpointClient();
        var url = $"{GetToaDoThuaDatUrl}?serial={_serial}";
        _geoJsonData = null;
        try
        {
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(result))
                {
                    _error = "Không tìm thấy vị trí thửa đất";
                }
                else
                {
                    _geoJsonData = JsonSerializer.Serialize(JsonSerializer.Deserialize<object>(result));
                }
            }
            else
            {
                _error = "Không tìm thấy vị trí thửa đất";
            }
            await LeafletMapService.InitializeAsync(MapContainerId);
            await LeafletMapService.UpdateMapAsync(_geoJsonData);
        }
        catch (Exception e)
        {
            _error = "Lỗi khi tải vị trí thửa đất";
            Console.WriteLine(e);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}