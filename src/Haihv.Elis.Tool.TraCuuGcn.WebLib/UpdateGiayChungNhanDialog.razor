@using System.Globalization
@using System.Net.Http.Json
@using Haihv.Elis.Tool.TraCuuGcn.Models
<AuthorizeView>
    <Authorized>
        <MudDialog>
            <TitleContent>
                <MudStack Row="true" AlignItems="AlignItems.End">
                    <MudAvatar Color="Color.Warning" Variant="Variant.Outlined" Rounded="true">
                        <MudIcon Icon="@Icons.Material.Filled.Update"/>
                    </MudAvatar>
                    <MudText Typo="Typo.h6"
                             Color="Color.Warning">
                        Cập nhật Giấy chứng nhận
                    </MudText>
                </MudStack>
            </TitleContent>
            <DialogContent>
                <MudPaper Class="mx-n2 pa-2" Outlined="true">
                    <MudField Label="Số phát hành (Serial) Giấy chứng nhận">
                        @PhapLyGiayChungNhan?.Serial
                    </MudField>
                    <MudStack Row="true">
                        <MudDatePicker @ref="_ngayKyPicker"
                                       @bind-Date="@_ngayKy"
                                       DateFormat="dd/MM/yyyy"
                                       Margin="Margin.Dense"
                                       Variant="Variant.Text"
                                       MinDate="MinNgayKy"
                                       MaxDate="DateTime.Today"
                                       ShowToolbar="false"
                                       Culture="@GetVietnameseCulture()"
                                       Editable="true"
                                       Mask="@(new DateMask("dd/MM/yyyy"))"
                                       Required="true"
                                       Label="Ngày ký"
                                       AutoClose="true"
                                       RequiredError="Ngày ký không được để trống"
                                       HelperText="Ngày ký Giấy chứng nhận">
                            <PickerActions Context="pickerActionsContext">
                                @if (MinNgayKy.HasValue)
                                {
                                    <MudButton Color="Color.Default"
                                               OnClick="() => _ngayKyPicker.GoToDate(MinNgayKy.Value.Date)">
                                        Ngày in Giấy chứng nhận
                                    </MudButton>
                                }
                                <MudButton Color="Color.Primary"
                                           OnClick="() => _ngayKyPicker.GoToDate(DateTime.Today)">
                                    Hôm nay
                                </MudButton>
                            </PickerActions>
                        </MudDatePicker>
                        <MudDatePicker @ref="_ngayVaoSoPicker"
                                       @bind-Date="@_ngayVaoSo"
                                       DateFormat="dd/MM/yyyy"
                                       Margin="Margin.Dense"
                                       Variant="Variant.Text"
                                       MinDate="MinNgayKy"
                                       MaxDate="DateTime.Today"
                                       ShowToolbar="false"
                                       Culture="@GetVietnameseCulture()"
                                       Editable="true"
                                       Mask="@(new DateMask("dd/MM/yyyy"))"
                                       Required="true"
                                       Label="Ngày vào sổ"
                                       AutoClose="true"
                                       RequiredError="Ngày vào sổ không được để trống"
                                       HelperText="Ngày vào sổ Giấy chứng nhận">
                            <PickerActions Context="pickerActionsContext">
                                @if (MinNgayKy.HasValue && _ngayKy.HasValue)
                                {
                                    <MudButton Color="Color.Default"
                                               OnClick="() => _ngayVaoSoPicker.GoToDate(_ngayKy.Value)">
                                        Theo ngày ký Giấy chứng nhận
                                    </MudButton>
                                }
                                <MudButton Color="Color.Primary"
                                           OnClick="() => _ngayVaoSoPicker.GoToDate(DateTime.Today)">
                                    Hôm nay
                                </MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </MudStack>
                    
                    <MudTextField T="string"
                                  @bind-Value="@_nguoiKy"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Text"
                                  Label="Người ký"
                                  Required="true"
                                  RequiredError="Người ký không được để trống"
                                  HelperText="Người ký Giấy chứng nhận"/>
                    <MudTextField T="string"
                                  @bind-Value="@_soVaoSo"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Text"
                                  Label="Số vào sổ"
                                  Required="true"
                                  RequiredError="Số vào sổ không được để trống"
                                  HelperText="Số vào sổ Giấy chứng nhận"/>
                </MudPaper>
                
                <MudStack Class="mt-2" Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudTextField T="string"
                                  @bind-Value="@_serial"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Text"
                                  HelperText="Nhập lại số phát hành (serial) để xác nhận cập nhật!"
                                  DebounceInterval="200" OnDebounceIntervalElapsed="HandleIntervalElapsed"/>
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Size="Size.Small"
                        StartIcon="@Icons.Material.Filled.Delete"
                        Disabled="@(_processing || _disabledUpdateButton)"
                        OnClick="UpdateGiayChungNhan">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Đang cập nhật</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.button">Cập nhật</MudText>
                        }
                    </MudButton>
                </MudStack>
            </DialogContent>
        </MudDialog>
    </Authorized>
</AuthorizeView>

@inject ISnackbar SnackbarService
@inject IHttpClientFactory HttpClientFactory
@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public DateTime? MinNgayKy { get; set; }
    [Parameter] public PhapLyGiayChungNhan? PhapLyGiayChungNhan { get; set; }
    private const string UrlUpdateGiayChungNhan = "elis/update-gcn";
    private string? _nguoiKy;
    private DateTime? _ngayKy = DateTime.Now;
    private DateTime? _ngayVaoSo = DateTime.Now;
    private string? _soVaoSo;
    private bool _processing;
    private string? _serial;
    private bool _disabledUpdateButton = true;
    private HttpClient _httpClient = null!;
    private MudDatePicker _ngayKyPicker = null!;
    private MudDatePicker _ngayVaoSoPicker = null!;

    protected override void OnInitialized()
    {
        _httpClient = HttpClientFactory.CreateClient("Endpoint");
    }

    protected override void OnParametersSet()
    {
        if (PhapLyGiayChungNhan != null && PhapLyGiayChungNhan.Serial != _serial)
        {
            if (PhapLyGiayChungNhan.NgayKy.HasValue && PhapLyGiayChungNhan.NgayKy.Value > DateTime.MinValue)
            {
                _ngayKy = PhapLyGiayChungNhan.NgayKy;
            }
            _nguoiKy = PhapLyGiayChungNhan.NguoiKy;
            _soVaoSo = PhapLyGiayChungNhan.SoVaoSo;
            if (PhapLyGiayChungNhan.NgayVaoSo.HasValue && PhapLyGiayChungNhan.NgayVaoSo.Value > DateTime.MinValue)
            {
                _ngayVaoSo = PhapLyGiayChungNhan.NgayVaoSo;
            }
        }
        else
        {
            _ngayKy = DateTime.Now;
            _nguoiKy = string.Empty;
            _soVaoSo = string.Empty;
            _ngayVaoSo = DateTime.Now;
        }
        base.OnParametersSet();
        
    }

    private static CultureInfo GetVietnameseCulture()
    {
        var culture = new CultureInfo("vi-VN");
        var formatInfo = culture.DateTimeFormat;
        
        // Vietnamese day names
        formatInfo.AbbreviatedDayNames = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];
        formatInfo.DayNames = ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"];
        
        // Vietnamese month names
        var monthNames = new[]
        {
            "Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", 
            "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""
        };
        
        var abbreviatedMonthNames = new[]
        {
            "Th.1", "Th.2", "Th.3", "Th.4", "Th.5", "Th.6", 
            "Th.7", "Th.8", "Th.9", "Th.10", "Th.11", "Th.12", ""
        };
        
        formatInfo.MonthNames = monthNames;
        formatInfo.MonthGenitiveNames = monthNames;
        formatInfo.AbbreviatedMonthNames = abbreviatedMonthNames;
        formatInfo.AbbreviatedMonthGenitiveNames = abbreviatedMonthNames;
        
        // Date formats
        formatInfo.ShortDatePattern = "dd/MM/yyyy";
        formatInfo.LongDatePattern = "dddd, dd MMMM, yyyy";
        formatInfo.FirstDayOfWeek = DayOfWeek.Monday;
        
        // Number formats
        culture.NumberFormat.NumberDecimalSeparator = ",";
        culture.NumberFormat.CurrencyDecimalSeparator = ",";
        
        return culture;
    }
    private async Task UpdateGiayChungNhan()
    {
        if (string.IsNullOrWhiteSpace(_serial) || _serial != PhapLyGiayChungNhan?.Serial)
        {
            SnackbarService.Add("Số phát hành không chính xác", Severity.Error);
            return;
        }
        if (string.IsNullOrWhiteSpace(_nguoiKy) || string.IsNullOrWhiteSpace(_soVaoSo))
        {
            SnackbarService.Add("Người ký và Số vào sổ không được để trống", Severity.Warning);
            return;
        }
        
        if (!_ngayKy.HasValue || !MinNgayKy.HasValue || _ngayKy.Value.Date < MinNgayKy.Value.Date)
        {
            SnackbarService.Add(
                MinNgayKy.HasValue ? 
                    $"Ngày ký không được nhỏ hơn ngày tạo Mã QR: {MinNgayKy.Value:dd/MM/yyyy}" : 
                    "Ngày ký không được để trống", 
                Severity.Warning);
            return;
        }
        _processing = true;
        try
        {
            PhapLyGiayChungNhan.NgayKy = _ngayKy;
            PhapLyGiayChungNhan.NguoiKy = _nguoiKy;
            PhapLyGiayChungNhan.SoVaoSo = _soVaoSo;
            PhapLyGiayChungNhan.NgayVaoSo = _ngayVaoSo;
            var response = await _httpClient.PostAsJsonAsync(UrlUpdateGiayChungNhan, PhapLyGiayChungNhan);
            if (response.IsSuccessStatusCode)
            {
                SnackbarService.Add("Cập nhật Giấy chứng nhận thành công", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                SnackbarService.Add($"Cập nhật Giấy chứng nhận không thành công: {await response.Content.ReadAsStringAsync()}", Severity.Error);
            }
            
        }
        catch (Exception e)
        {
            SnackbarService.Add($"Lỗi trong quá trình cập nhật Giấy chứng nhận: {e.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private void HandleIntervalElapsed(string value)
    {
        _disabledUpdateButton = string.IsNullOrWhiteSpace(value) || value != PhapLyGiayChungNhan?.Serial;
        _serial = value;
        StateHasChanged();
    }
}