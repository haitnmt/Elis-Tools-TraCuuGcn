@using System.Text.Json
@if (HasGiayChungNhan)
{
    <MudCard>
        <MudCardContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Vị trí thửa đất</MudText>
                <MudSpacer/>
                <MudTooltip Text="Mở trên Google Map">
                    <MudIconButton Icon="@Icons.Material.Filled.Map" OnClick="LeafletMapService.ShareToGoogleMaps"/>
                </MudTooltip>
            </MudStack>

            @if (_isLoading)
            {
                <MudProgressLinear Color="Color.Success" Indeterminate="true"/>
            }
            else
            {
                @if (_geoJsonData is null || !string.IsNullOrWhiteSpace(_error))
                {
                    <MudAlert Severity="Severity.Error">
                        @(_error ?? "Không tìm thấy vị trí thửa đất")
                    </MudAlert>
                }
            }
            <MudPaper Outlined="true" Elevation="1">
                <div id="@MapContainerId"
                     style="width: 100%; aspect-ratio: 1;"></div>
            </MudPaper>
        </MudCardContent>
    </MudCard>
}

@inject LeafletMapService LeafletMapService
@inject IThuaDatServices ThuaDatServices
@inject ISnackbar SnackbarService

@code
{
    [Parameter] public string? Serial { get; set; }
    [Parameter] public string? SoDinhDanh { get; set; }
    [Parameter] public bool HasGiayChungNhan { get; set; }
    private const string MapContainerId = "map";
    private string? _geoJsonData;
    private string? _error = string.Empty;
    private string? _serial;
    private bool _isLoading;

    protected override async Task OnParametersSetAsync()
    {
        if (!HasGiayChungNhan || (Serial == _serial && _geoJsonData is not null)) return;
        _serial = Serial;
        if (string.IsNullOrWhiteSpace(_serial))
        {
            HasGiayChungNhan = false;
            StateHasChanged();
        }
        else
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        _error = null;
        _isLoading = true;
        StateHasChanged();
        _geoJsonData = null;
        try
        {
            var (result,  message) = await ThuaDatServices.GetToaDoThuaDatAsync(_serial!, SoDinhDanh);
            if (!string.IsNullOrWhiteSpace(message) && result is null)
                SnackbarService.Add(message, Severity.Warning);
            if (result is null) return;
            _geoJsonData = JsonSerializer.Serialize(result);
            await LeafletMapService.InitializeAsync(MapContainerId);
            await LeafletMapService.UpdateMapAsync(_geoJsonData);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}