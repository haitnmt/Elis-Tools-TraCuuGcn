@using System.Net.Http.Json
@using Haihv.Elis.Tool.TraCuuGcn.Models
@if (HasGiayChungNhan)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h6">Thông tin thửa đất</MudText>

            @if (_isLoading)
            {
                <MudProgressLinear Color="Color.Success" Indeterminate="true"/>
            }
            else if (_thuaDats.Count == 0)
            {
                <MudAlert Severity="Severity.Error">
                    Không tìm thấy thông tin Thửa đất
                </MudAlert>
            }
            else
            {
                foreach (var thuaDat in _thuaDats)
                {
                    <MudPaper Class="pa-4" Outlined="true" Elevation="1">
                        <MudGrid Spacing="2">
                            <MudItem xs="6" lg="4">
                                <MudField Label="Tờ bản đồ" Variant="Variant.Text">
                                    @thuaDat.ToBanDo
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" lg="4">
                                <MudField Label="Thửa đất số" Variant="Variant.Text">
                                    @thuaDat.ThuaDatSo
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" lg="4">
                                <MudField Label="Diện tích" Variant="Variant.Text">
                                    @thuaDat.DienTich
                                </MudField>
                            </MudItem>
                            <MudFlexBreak/>
                            <MudItem xs="6" lg="6">
                                <MudField Label="Loại đất" Variant="Variant.Text">
                                    @thuaDat.LoaiDat
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" lg="6">
                                <MudField Label="Thời hạn" Variant="Variant.Text">
                                    @thuaDat.ThoiHan
                                </MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudField Label="Hình thức sử dụng" Variant="Variant.Text">
                                    @thuaDat.HinhThuc
                                </MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudField Label="Nguồn gốc sử dụng" Variant="Variant.Text">
                                    @thuaDat.NguonGoc
                                </MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudField Label="Địa chỉ" Variant="Variant.Text">
                                    @thuaDat.DiaChi
                                </MudField>
                            </MudItem>
                            @if (!string.IsNullOrWhiteSpace(thuaDat.GhiChu))
                            {
                                <MudItem xs="12">
                                    <MudField Label="Ghi chú" Variant="Variant.Text">
                                        @thuaDat.GhiChu
                                    </MudField>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                }
            }
        </MudCardContent>
    </MudCard>
}

@inject IThuaDatServices ThuaDatServices
@inject ISnackbar SnackbarService

@code {
    [Parameter] public string? Serial { get; set; }
    [Parameter] public string? SoDinhDanh { get; set; }
    [Parameter] public bool HasGiayChungNhan { get; set; }
    private List<ThuaDat> _thuaDats = [];
    private string? _serial;
    private bool _isLoading;

    protected override async Task OnParametersSetAsync()
    {
        if (!HasGiayChungNhan || (Serial == _serial && _thuaDats.Count > 0)) return;
        _serial = Serial;
        if (string.IsNullOrWhiteSpace(_serial))
        {
            HasGiayChungNhan = false;
            StateHasChanged();
        }
        else
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        if (string.IsNullOrWhiteSpace(_serial)) return;
        _isLoading = true;
        StateHasChanged();
        try
        {
            (_thuaDats, var message) = await ThuaDatServices.GetThuaDatAsync(_serial, SoDinhDanh);
            if (!string.IsNullOrWhiteSpace(message) && _thuaDats.Count == 0)
                SnackbarService.Add(message, Severity.Warning);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        _isLoading = false;
        StateHasChanged();
    }

}