@using Haihv.Elis.Tool.TraCuuGcn.WebLib.Services
@implements IDisposable
@inject NavigationManager Navigation

<div class="nav-item px-3">
    <AuthorizeView>
        <Authorized>
            <MudStack Row="true">
                <MudText>
                   @_userInfo?.DisplayName
                </MudText>
                <form action="authentication/logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
                    <MudTooltip Text="Đăng xuất">
                        <MudIconButton Icon="@Icons.Material.Filled.Logout" Size="Size.Small" Color="Color.Inherit"
                                       ButtonType="ButtonType.Submit" />
                    </MudTooltip>
                </form>
            </MudStack>
        </Authorized>
        <NotAuthorized>
            <MudButton Color="Color.Inherit" Href="/authentication/login">
                <MudText>Đăng nhập</MudText>
            </MudButton>
        </NotAuthorized>
    </AuthorizeView>
</div>

@inject UserInfoService UserInfoService
@code {
    private string? _currentUrl;
    private UserInfo? _userInfo;
    protected override async Task OnInitializedAsync()
    {
        _currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _userInfo = await UserInfoService.GetUserInfoAsync();
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = Navigation.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
