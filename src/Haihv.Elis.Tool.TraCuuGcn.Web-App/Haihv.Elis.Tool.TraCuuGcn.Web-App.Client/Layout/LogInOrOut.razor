@using Haihv.Elis.Tool.TraCuuGcn.Models
@using Haihv.Elis.Tool.TraCuuGcn.WebLib.Services

@implements IDisposable
<AuthorizeView>
    <Authorized>
        <MudStack Row="true">
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText>
                    Xin chào, @_userInfo?.DisplayName
                </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudTooltip Text="@($"Xin chào, {_userInfo?.DisplayName}")"
                            Color="Color.Default"
                            Placement="Placement.Bottom">
                    <MudIcon Icon="@Icons.Material.Filled.Person"
                             Size="Size.Small"/>
                </MudTooltip>
            </MudHidden>
            <LogOut CurrentUrl="@_currentUrl"/>
        </MudStack>
    </Authorized>
    <NotAuthorized>
        <MudButton Color="Color.Inherit" Href="@($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}")">
            <MudText Typo="Typo.subtitle1">Đăng nhập</MudText>
        </MudButton>
    </NotAuthorized>
</AuthorizeView>

@inject NavigationManager NavigationManager
@inject IUserServices UserServices
@inject AuthenticationStateProvider AuthStateProvider
@code {
    private string? _currentUrl;

    private UserInfo? _userInfo;
    
    protected override async Task OnInitializedAsync()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                _userInfo = await UserServices.GetUserInfoAsync();
            }
        }
        catch (Exception)
        {
            _userInfo = null;
        }
        StateHasChanged();
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}
